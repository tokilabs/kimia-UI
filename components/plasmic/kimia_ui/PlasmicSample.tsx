// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hSC5XMAvbDbmF4e5kuW6xC
// Component: 7XB9spyb5j
import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';

import * as p from '@plasmicapp/react-web';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { Field } from ''; // plasmic-import: pjZjLN6JHN/codeComponent
import { FieldWrapper } from ''; // plasmic-import: uD4o8ukxXh/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';
import * as defaultcss from '../plasmic__default_style.module.css'; // plasmic-import: global/defaultcss
import * as projectcss from './plasmic_kimia_ui.module.css'; // plasmic-import: hSC5XMAvbDbmF4e5kuW6xC/projectcss
import * as sty from './PlasmicSample.module.css'; // plasmic-import: 7XB9spyb5j/css

export type PlasmicSample__VariantMembers = {};

export type PlasmicSample__VariantsArgs = {};
type VariantPropType = keyof PlasmicSample__VariantsArgs;
export const PlasmicSample__VariantProps = new Array<VariantPropType>();

export type PlasmicSample__ArgsType = {};
type ArgPropType = keyof PlasmicSample__ArgsType;
export const PlasmicSample__ArgProps = new Array<ArgPropType>();

export type PlasmicSample__OverridesType = {
  root?: p.Flex<'div'>;
  field?: p.Flex<typeof Field>;
  fieldWrapper?: p.Flex<typeof FieldWrapper>;
};

export interface DefaultSampleProps {
  dataFetches: PlasmicSample__Fetches;
}

function PlasmicSample__RenderFunc(props: {
  variants: PlasmicSample__VariantsArgs;
  args: PlasmicSample__ArgsType;
  overrides: PlasmicSample__OverridesType;
  dataFetches?: PlasmicSample__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{''}</title>
        <meta key="og:title" property="og:title" content={''} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={''}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
          )}
        >
          <Field
            data-plasmic-name={'field'}
            data-plasmic-override={overrides.field}
            className={classNames('__wab_instance', sty.field)}
          />

          <FieldWrapper
            data-plasmic-name={'fieldWrapper'}
            data-plasmic-override={overrides.fieldWrapper}
            className={classNames('__wab_instance', sty.fieldWrapper)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'field', 'fieldWrapper'],
  field: ['field'],
  fieldWrapper: ['fieldWrapper'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  field: typeof Field;
  fieldWrapper: typeof FieldWrapper;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSample__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSample__VariantsArgs;
    args?: PlasmicSample__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSample__Fetches;
  } & Omit<PlasmicSample__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSample__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSample__ArgProps,
      internalVariantPropNames: PlasmicSample__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicSample__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicSample';
  } else {
    func.displayName = `PlasmicSample.${nodeName}`;
  }
  return func;
}

export const PlasmicSample = Object.assign(
  // Top-level PlasmicSample renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    field: makeNodeComponent('field'),
    fieldWrapper: makeNodeComponent('fieldWrapper'),

    // Metadata about props expected for PlasmicSample
    internalVariantProps: PlasmicSample__VariantProps,
    internalArgProps: PlasmicSample__ArgProps,
  },
);

export default PlasmicSample;
/* prettier-ignore-end */
